/*
  ____                       _   _                 
 / __ \                     | | (_)                
| |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___ 
| |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
| |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
 \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
       | |                                         
       |_|                                         

*/

//
// Standard number operations (+ - / * %)
//

p {
  width: 1in + 8pt;
}

// compiles to
p {
  width: 1.111in; // note: Sass will automatically convert between units if it can
}

// division gotchas
p {
  font: 10px/8px;             // Plain CSS, no division
  $width: 1000px;
  width: $width/2;            // Uses a variable, does division
  height: (500px/2);          // Uses parentheses, does division
  margin-left: 5px + 8px/2px; // Uses +, does division
}

// compiles to
p {
  font: 10px/8px;
  width: 500px;
  height: 250px;
  margin-left: 9px;
}

// use variables along with a plain CSS 
p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size}/#{$line-height};
}

// compiles to
p {
  font: 12px/30px;
}

//
// String operations
//
p {
  cursor: e + -resize;
}

// compiles to
p {
  cursor: e-resize;
}

p:before {
  content: "I ate #{5 + 10} pies!";
}

// compiles to
p:before {
  content: "I ate 15 pies!";
}

$value: null;
p:before {
  content: "I ate #{$value} pies!";
}

// compiles to
p:before {
  content: "I ate  pies!";
}

//
// Colour operations (that's just crazy)
//
p {
  color: #010203 + #040506; // seriously — wtf?
}

// RR GG BB                                 
// 01 02 03                                  
// 04 05 06
// --------
// 05 07 09

// compiles to:
p {
  color: #050709;
}




























































/*
 ______                _   _                 
|  ____|              | | (_)                
| |__ _   _ _ __   ___| |_ _  ___  _ __  ___ 
|  __| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
| |  | |_| | | | | (__| |_| | (_) | | | \__ \
|_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
                                             
*/

//
// Color functions 
//
$bold-color: saturate($main-color, 25%);
$accent-color: adjust-hue($bold-color, 60deg); // same as complement($color)
$main-gray-color: grayscale($main-color);
$highlight-color: lighten($main-color, 20%);
$shadow-color: darken($main-color, 20%);
$invert-color: invert($main-color);
$complement-color: complement($main-color);
$combined-color: mix(#000,#fff);


//
// Opacity functions
//
$rgba-example: rgba(#cc0000, 0.4);
$alpha-value: alpha(rgba(51, 255, 51, 0.75)); // 0.75
$opacity-value: opacity(rgba(51, 255, 51, 0.75)); // 0.75
$increase-opacity: opacify(rgba(51, 255, 51, 0.75), 0.1); // rgba(51, 255, 51, 0.85)
$fadein-opacity: fade-in(rgba(51, 255, 51, 0.75), 0.1); // rgba(51, 255, 51, 0.85)
$increase-color: transparentize(rgba(51, 255, 51, 0.75), 0.1); // rgba(51, 255, 51, 0.65)
$fade-out-color: fade-out(rgba(51, 255, 51, 0.75), 0.1); // rgba(51, 255, 51, 0.65)

//
// Number functions
//
// • round($value)
//   Rounds a number to the nearest whole number.
// • ceil($value)
//   Rounds a number up to the nearest whole number.
// • floor($value)
//   Rounds a number down to the nearest whole number.
// • abs($value)
//   Returns the absolute value of a number.
// • min($x1, $x2, …)
//   Finds the minimum of several values.
// • max($x1, $x2, …)
//   Finds the maximum of several values.

$side-bar: percentage(180px/960px); //target ÷ context


//
// List functions
//
$font-stack: "Proxima nova", Arial, sans-serif;
length($font-stack) // 3
nth($font-stack, 2) // Arial

$margins: 10px 5px 20px 12px;
length($margins) // 4
nth($margins, 3) // 20px

join(10px 20px, 30px 40px) // 10px 20px 30px 40px
join((blue, red), (#abc, #def)) // blue, red, #abc, #def
join(10px, 20px) // 10px 20px
join(10px, 20px, comma) // 10px, 20px
join((blue, red), (#abc, #def), space) // blue red #abc #def

// Practical use
$gradient: #000, #fff;

button {
  background: mix( nth($gradient,1), nth($gradient,2) );
  background: -moz-linear-gradient(top,  nth($gradient,1) 0%, nth($gradient,2) 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,nth($gradient,1)), color-stop(100%,nth($gradient,2)));
  background: -webkit-linear-gradient(top,  nth($gradient,1) 0%,nth($gradient,2) 100%);
  background: -o-linear-gradient(top,  nth($gradient,1) 0%,nth($gradient,2) 100%);
  background: -ms-linear-gradient(top,  nth($gradient,1) 0%,nth($gradient,2) 100%);
  background: linear-gradient(to bottom,  nth($gradient,1) 0%,nth($gradient,2) 100%);
}

// compiles to
button {
  background: #7f7f7f;
  background: -moz-linear-gradient(top, #000000 0%, #ffffff 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #000000), color-stop(100%, #ffffff));
  background: -webkit-linear-gradient(top, #000000 0%, #ffffff 100%);
  background: -o-linear-gradient(top, #000000 0%, #ffffff 100%);
  background: -ms-linear-gradient(top, #000000 0%, #ffffff 100%);
  background: linear-gradient(to bottom, #000000 0%, #ffffff 100%);
}


//
// Conditions
//

// http://css-tricks.com/snippets/css/css-triangle/
@mixin arrow($direction, $color, $size) {
  display: inline-block;
  width: 0;
  height: 0;
  @if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  } @else if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;    
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;    
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;    
  } @else {
    @warn "No direction given. We'll assume up.";
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
  }
}

.arrow-down {
    @include arrow(down, #c00, 10px);
}

// Compiles to
.arrow-down {
  display: inline-block;
  width: 0;
  height: 0;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #cc0000;
}

//
// For loop
//
@mixin headers($base_font_size: 24px, $number_of_headings: 4, $multiplier: 2) {

  @for $i from 1 through $number_of_headings {
    h#{$i} {
      font-size: $base_font_size - $i*$multiplier;
    }
  }
}

@include headers();

// Compiles to
h1 {
  font-size: 22px;
}

h2 {
  font-size: 20px;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}


//
// Each loop
//
@mixin icon-list($the_list) {

  @each $item in $the_list {
    .#{$item}-icon {
      background-image: url('/images/#{$item}.png');
    }
  }
}

$animal_list: puma, sea-slug, egret, salamander;
@include icon-list($animal_list);

// Compiles to
.puma-icon {
  background-image: url("/images/puma.png");
}

.sea-slug-icon {
  background-image: url("/images/sea-slug.png");
}

.egret-icon {
  background-image: url("/images/egret.png");
}

.salamander-icon {
  background-image: url("/images/salamander.png");
}


/*
 _______          _______  
|  __ \ \        / /  __ \ 
| |__) \ \  /\  / /| |  | |
|  _  / \ \/  \/ / | |  | |
| | \ \  \  /\  /  | |__| |
|_|  \_\  \/  \/   |_____/ 
                           
*/

//
// Inline media queries
//

.site-nav {
  li {
    display: inline-block;
    margin: 0 10px;

    @media only screen and (max-width: 500px) {
      display: block;
      margin: 0;
    }

  }
}

.main {
  width: 960px;
  margin: auto;
  font-size: 18px;

  @media only screen and (max-width: 700px) {
    width: 100%;
    margin: 0 10px;
    font-size: 15px;
  }

  @media only screen and (max-width: 700px) {
    font-size: 13px;
  }

}

// compiles to
.site-nav li {
  display: inline-block;
  margin: 0 10px;
}
@media only screen and (max-width: 500px) {
  .site-nav li {
    display: block;
    margin: 0;
  }
}

.main {
  width: 960px;
  margin: auto;
  font-size: 18px;
}
@media only screen and (max-width: 700px) {
  .main {
    width: 100%;
    margin: 0 10px;
    font-size: 15px;
  }
}
@media only screen and (max-width: 700px) {
  .main {
    font-size: 13px;
  }
}








//
// Respond-to mixin
//
@mixin respond-to($size) { 
  @media only screen and (max-width: $size) { 
    @content; 
  }
}

//
// To Use
//
.site-nav {
  li {
    display: inline-block;
    margin: 0 10px;

    @include respond-to(500px) {
      display: block;
      margin: 0;
    }

  }
}

.main {
  width: 960px;
  margin: auto;
  font-size: 18px;

  @include respond-to(700px) {
    width: 100%;
    margin: 0 10px;
    font-size: 15px;
  }

  @include respond-to(500px) {
    font-size: 13px;
  }

}

// Compiles to
.site-nav li {
  display: inline-block;
  margin: 0 10px;
}
@media only screen and (max-width: 500px) {
  .site-nav li {
    display: block;
    margin: 0;
  }
}

.main {
  width: 960px;
  margin: auto;
  font-size: 18px;
}
@media only screen and (max-width: 700px) {
  .main {
    width: 100%;
    margin: 0 10px;
    font-size: 15px;
  }
}
@media only screen and (max-width: 500px) {
  .main {
    font-size: 13px;
  }
}








//
// Responsive units
//
$site-width: 1000px;

#main-column {
  width: percentage(650px/$site-width);
}

#sub-column {
  width: percentage(250px/$site-width);
}







//
// Roll your own ems
//
$font-size: 16px;
@function em($target, $context: $font_size) {
  @return ($target / $context) * 1em;
}

// to use
p {
  font-size: em(12px);
}

h1 {
    font-size: em(24px, 10px);
}

// compiles to
p {
  font-size: 0.75em;
}

h1 {
  font-size: 2.4em;
}

/*
 _      _____ _   _ _  __ _____ _ 
| |    |_   _| \ | | |/ // ____| |
| |      | | |  \| | ' /| (___ | |
| |      | | | . ` |  <  \___ \| |
| |____ _| |_| |\  | . \ ____) |_|
|______|_____|_| \_|_|\_\_____/(_)
                                  

Sass Playground
http://sassmeister.com/

Sass Bootstrap
https://github.com/thomas-mcdonald/bootstrap-sass/tree/master/vendor/assets/stylesheets

Easy Buttons
http://jaredhardy.com/sassy-buttons/

Visualise Sass Colours
http://sassme.arc90.com/

Normalize Scss
https://github.com/kristerkari/normalize.scss/blob/master/_normalize.scss
*/